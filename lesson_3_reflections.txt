When would you want to use a remote repository rather than keeping all your work local?

  I'd want to have a remote repository in these cases:
    1. To store copies of my files not only on my computer for the reason not to loose them if something bad happens with my PC.
    2. To have access to the files from another computer.
    3. To work with the files with other people.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

  Because when you're working on a feature you need your code to be immutable, so automatic update might change the code that you're
  working on. 

Describe the differences between forks, clones, and branches. When would you use one instead of another?

  Clones are used to copy repositories on a computer. We use forks if we want to copy someone else repositories and edit them 
  without affecting original ones. Branches are used to work, for example, on different features or bug fixes, on the same repository.

What is the benefit of having a copy of the last known state of the remote stored locally?

  - You can inspect the copy to know what changes were introduced by somebody else.
  - You can compare changes in the remote with your local state.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

  I would upload files somewhere and sent an email to someone to check changes. Then if something wrong that man
  would have to send me an email back highlighting the file where I need to fix the problems. So that's a lot of extra actions.
  Of course Git makes it easier to collaborate with other people.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

  1. When I want to have one stable version of the code in master and work on features in other branches till they are ready to be part 
     of master branch.
  2. When I collaborate with somebody each of us make its changes in the code in their separate branch, so that I could inspect
     them before adding those changes to the master branch.
  3. But if you have a lot of branches, of course its harder to keep track what's going on in each branch.